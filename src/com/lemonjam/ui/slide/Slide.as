package com.lemonjam.ui.slide{	import flash.events.Event;	import flash.events.ProgressEvent;	import com.lemonjam.core.ImageLoader;	import com.lemonjam.ui.slide.SlideBase;	import com.greensock.*;	import flash.geom.Point;		public class Slide extends SlideBase	{		private var _img:ImageLoader;		private var _source:String = "";		private var _startedLoading:Boolean = false;		private var _forceHorizontal:Boolean = false;				private var HORIZONTAL:Boolean = true;		private var _data:Object;		private var _shouldShow:Boolean = false;				public function Slide(slideData:Object, forceHorizontal:Boolean = false){			_data = slideData;			_source = slideData.img;			_forceHorizontal = forceHorizontal;		}				public function build(showPreloader:Boolean = false):void		{			showing = showPreloader;						if(!_startedLoading){				_startedLoading = true;								_img = new ImageLoader(_source);				this.addChild(_img);				_img.alpha = 0;				trace("showing preloader: " + showPreloader);				if(!showPreloader)													_img.removeProgress();				else																_img.addProgress();			}			else if(_startedLoading && showing){				_img.addProgress();			}			if(loaded && showing){				this.resize();				trace("loaded and showing");				TweenLite.to(_img, .5, {alpha:1});			}						if(! (_img.hasEventListener(Event.COMPLETE)))	_img.addEventListener(Event.COMPLETE, _imageLoaded);		}				public function unbuild():void		{			showing = false;			TweenLite.to(this, .5, {alpha:0});			if(_startedLoading){				if(_img.hasEventListener(Event.COMPLETE))			_img.removeEventListener(Event.COMPLETE, _imageLoaded);			}					}				public function startSilentLoad():void		{			_startedLoading = true;		}				private function _imageLoaded(e:Event):void		{			loaded = true;						if(_img.width < _img.height)	HORIZONTAL = false;			if(_forceHorizontal)			HORIZONTAL = true;									//showing = true;			trace("image loaded: " + showing);			if(showing){				this.resize();				TweenLite.to(_img, .5, {alpha:1});			}						if(_img.hasEventListener(Event.COMPLETE))			_img.removeEventListener(Event.COMPLETE, _imageLoaded);		}					public function resize():void		{			if(loaded && showing){				//trace("Resizing img: " + uri);				var _newW:Number = horizontalSize.x;				var _newH:Number = horizontalSize.y;								if((HORIZONTAL && _newH < (stage.stageHeight-65)) || !HORIZONTAL){					_newW = verticalSize.x;					_newH = verticalSize.y;				}								_img.width = _newW;				_img.height = _newH;								_img.x = (stage.stageWidth/2) - (_img.width/2);				_img.y = ((stage.stageHeight-65)/2) - (_img.height/2);			}		}				public function get horizontalSize():Point		{			var _newW:Number = stage.stageWidth;			var _percent:Number = (_newW * 100)/_img.width;			var _newH:Number = (_percent*_img.height)/100;						var _sizes:Point = new Point(_newW, _newH);						return _sizes;		}				public function get verticalSize():Point		{			var _newH:Number = (stage.stageHeight-65);			var _percent:Number = (_newH * 100) / _img.height;			var _newW:Number = (_percent*_img.width)/100;						var _sizes:Point = new Point(_newW, _newH);						return _sizes;		}				public function get uri():String		{			return _data.uri;		}	}}